# -*- coding: utf-8 -*-
"""Sentimen Analisis Mobile L

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16TIPjEnOHBCoPN81-LzczA0DlCZ2J0vC
"""

!pip install Wordcloud
!pip install Sastrawi
!pip install pandas

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import re
import nltk
from nltk.corpus import stopwords
from wordcloud import WordCloud, STOPWORDS
from sklearn.feature_extraction.text import CountVectorizer
from nltk.tokenize import RegexpTokenizer

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.naive_bayes import MultinomialNB

from wordcloud import WordCloud, STOPWORDS

data = pd.read_csv('/content/sample_data/Mobil_Listrik/mobil_listrik.csv')
data.head()

"""1. Data Undesrtanding"""

data.dtypes

data.shape

data = data.dropna()
data.isnull().sum()

data.duplicated().sum()

data.describe()

"""2. Preprocessing Teks"""

data.head()

data = data.drop(columns='id_komentar')
data.head()

#menjadi lower teks
data['text_cleaning'] = data['text_cleaning'].str.lower()
data.head()

# normalisasi problem = masalah atau kata-kata yang tidak terdeteksi akan dinormalisasikan

norm = {'dgn' : ' dengan ', 'gue':'saya', 'ngaco' : 'sembarangan', 'kwalitas':'kualitas', 'blom':'belum', 'aing':'saya', 'donk':'dong','dg':'dengan', 'kudu':'harus','problem':'masalah'}

def normalisasi(str_text):
  for i in norm:
    str_text = str_text.replace(i, norm[i])
    return str_text
data['text_cleaning'] = data['text_cleaning'].apply(lambda x: normalisasi(x))

#stopword yang di dll

import Sastrawi
from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory, StopWordRemover, ArrayDictionary
more_stop_word = []

stop_words = StopWordRemoverFactory().get_stop_words()
new_array = ArrayDictionary(stop_words)
stop_words_remover_new = StopWordRemover(new_array)

def stopword(str_text):
  for i in norm:
    str_text = stop_words_remover_new.remove(str_text)
    return str_text
data['text_cleaning'] = data['text_cleaning'].apply(lambda x: stopword(x))
data.head()

#tokenisasi

tokenized = data['text_cleaning'].apply(lambda x:x.split())
tokenized

#stemming -> jadi kata dasar
import pandas as pd
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory

def stemming(text_cleaning):
  factory = StemmerFactory()
  stemmer = factory.create_stemmer()
  do = []
  for w in text_cleaning:
    dt = stemmer.stem(w)
    do.append(dt)
  d_clean = []
  d_clean = " ".join(do)
  print(d_clean)
  return d_clean

tokenized = tokenized.apply(stemming)

tokenized.to_csv('/content/sample_data/Mobil_Listrik/mobil_listrik_clean1.csv', index=False)
data_clean = pd.read_csv('/content/sample_data/Mobil_Listrik/mobil_listrik_clean1.csv', encoding='latin-1')

data_clean.head()

at2 = pd.read_csv('/content/sample_data/Mobil_Listrik/mobil_listrik.csv')
at1 = pd.read_csv('/content/sample_data/Mobil_Listrik/mobil_listrik_clean1.csv')
att2 = at2['sentimen']

data_clean = pd.concat([at1, att2], axis=1)
data_clean

#hapus data nan
data_clean = data.dropna()

#hapus sentimen netral
data_clean = data_clean[data_clean['sentimen'] !='netral']
data_clean

#buat 0 negatif dan 1 positif
data_clean = data_clean.replace({'positif':1, 'negatif':0})
data_clean.head()

"""3. Visualisasi Data"""

data_negatif = data_clean[data_clean['sentimen'] == 0]
data_positif = data_clean[data_clean['sentimen'] == 1]

all_text_s0 = ' '.join(word for word in data_negatif['text_cleaning'])
wordcloud = WordCloud(colormap='Reds', width=1000, height=1000, mode='RGBA', background_color='white').generate(all_text_s0)
plt.figure(figsize=(9, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Visualisasi Kata Negatif')
plt.margins(x=0, y=0)
plt.show

all_text_s1 = ' '.join(word for word in data_positif['text_cleaning'])
wordcloud = WordCloud(colormap='Blues', width=1000, height=1000, mode='RGBA', background_color='white').generate(all_text_s1)
plt.figure(figsize=(9, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Visualisasi Kata Positif')
plt.margins(x=0, y=0)
plt.show

data_clean['sentimen'].value_counts()

data_clean.head()

#visualisasi gabungan
plt.figure(figsize=(5, 3))
sns.countplot(data=data_clean, x='sentimen', palette={'0': "red", '1': "lightskyblue"})
plt.title('Visualisasi Sentimen Positif dan Negatif')
plt.xlabel('Sentimen')
plt.ylabel('Jumlah')
plt.show()

"""
4. Data Preperation"""

# kita pisahkan menjadi data latih dan data uji

x = data_clean['text_cleaning']
y = data_clean['sentimen']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=42)

# gunakan CountVectorizer untuk teks menjadi numberik
vectorizer = CountVectorizer()
x_train_vec = vectorizer.fit_transform(x_train)
x_test_vec = vectorizer.transform(x_test)

#oversampling dengan menggunakan smote pada data latih

smote = SMOTE(random_state=42)
x_train_resampled, y_train_resampled = smote.fit_resample(x_train_vec, y_train)

#visualisasi setelah menggunakan smote
sentimen_counts = y_train_resampled.value_counts()

plt.figure(figsize=(5, 3))
plt.bar(sentimen_counts.index, sentimen_counts.values, color=['red', 'blue'])
plt.title('Visualisasi Sentimen Positif dan Negatif setelah SMOTE')
plt.xlabel('Sentimen')
plt.ylabel('Jumlah')
plt.xticks(sentimen_counts.index, ['0','1'])
plt.show()

"""5. Model"""

naive_bayes = MultinomialNB()
naive_bayes.fit(x_train_resampled, y_train_resampled)

y_pred = naive_bayes.predict(x_test_vec)

#evaluasi Model
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred, target_names=['negatif','positif'])

print("Akurasi model naive bayes", accuracy)
print("\nLaporan Klasifikasi :\n", classification_rep)

"""6. Testing"""

new_text = input("\nMasukan teks baru:")
new_text_vec = vectorizer.transform([new_text])
predicted_sentimen = naive_bayes.predict(new_text_vec)

if predicted_sentimen[0] == 1:
  sentiment_label = "positif"
elif predicted_sentimen [0] == 0:
  sentiment_label = "negatif"

print("Hasil Analisis Sentimen untuk Teks Baru:", sentiment_label)

